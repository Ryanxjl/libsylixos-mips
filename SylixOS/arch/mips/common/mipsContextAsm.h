/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                   嵌入式实时操作系统
**
**                                SylixOS(TM)  LW : long wing
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: mipsContextAsm.h
**
** 创   建   人: Ryan.Xin (信金龙)
**
** 文件创建日期: 2015 年 09 月 01 日
**
** 描        述: MIPS 体系构架上下文处理.
*********************************************************************************************************/

#ifndef __MIPSCONTEXTASM_H
#define __MIPSCONTEXTASM_H

#include "arch/mips/arch_regs.h"

/*********************************************************************************************************
  Operate the general registers: at, v0-v1, a0-a3, t0-t9, s0-s7, gp, fp, ra
*********************************************************************************************************/

#define OPERATE_REG(op)             \
    op      $1  , 1  * 4(SP);       \
    op      $2  , 2  * 4(SP);       \
    op      $3  , 3  * 4(SP);       \
    op      $4  , 4  * 4(SP);       \
    op      $5  , 5  * 4(SP);       \
    op      $6  , 6  * 4(SP);       \
    op      $7  , 7  * 4(SP);       \
    op      $8  , 8  * 4(SP);       \
    op      $9  , 9  * 4(SP);       \
    op      $10 , 10 * 4(SP);       \
    op      $11 , 11 * 4(SP);       \
    op      $12 , 12 * 4(SP);       \
    op      $13 , 13 * 4(SP);       \
    op      $14 , 14 * 4(SP);       \
    op      $15 , 15 * 4(SP);       \
    op      $16 , 16 * 4(SP);       \
    op      $17 , 17 * 4(SP);       \
    op      $18 , 18 * 4(SP);       \
    op      $19 , 19 * 4(SP);       \
    op      $20 , 20 * 4(SP);       \
    op      $21 , 21 * 4(SP);       \
    op      $22 , 22 * 4(SP);       \
    op      $23 , 23 * 4(SP);       \
    op      $24 , 24 * 4(SP);       \
    op      $25 , 25 * 4(SP);       \
    op      $28 , 28 * 4(SP);       \
    op      $30 , 30 * 4(SP);       \
    op      $31 , 31 * 4(SP);

/*********************************************************************************************************
  Operate the general registers: t0-t1
*********************************************************************************************************/

#define LW_T0_T1_REG()              \
    LW      T0 , REG_T0 * 4(SP);    \
    LW      T1 , REG_T1 * 4(SP);    \

/*********************************************************************************************************
  Pop the context: at, v0-v1, a0-a3, t0-t9, s0-s7, gp, fp, ra, pc, sr, lo, hi
*********************************************************************************************************/

#define RESTORE_REGS()                  \
    .set    push;                       \
    .set    noat;                       \
    .set    noreorder;                  \
                                        \
    OPERATE_REG(LW);                    \
                                        \
    LW      T0 , STK_OFFSET_LO(SP);     \
    MTLO    T0;                         \
    EHB;                                \
                                        \
    LW      T0 , STK_OFFSET_HI(SP);     \
    MTHI    T0;                         \
    EHB;                                \
                                        \
    LW      T0 , STK_OFFSET_EPC(SP);    \
    LW      T1 , STK_OFFSET_SR(SP);     \
    MOV     K0 , T0;                    \
    MOV     K1 , T1;                    \
                                        \
    LW_T0_T1_REG();                     \
                                        \
    ADDU    SP , STK_CTX_SIZE;          \
                                        \
    MTC0(K0, CP0_EPC);                  \
                                        \
    ORI     K1 , K1 , M_StatusEXL;      \
    MTC0(K1, CP0_STATUS);               \
                                        \
    ERET;                               \
                                        \
    .set    pop

/*********************************************************************************************************
  Push the context: at, v0-v1, a0-a3, t0-t9, s0-s7, gp, fp, ra, pc, sr, lo, hi, cause
*********************************************************************************************************/

#define SAVE_REGS()                     \
    .set    push;                       \
    .set    noat;                       \
    .set    noreorder;                  \
                                        \
    SUBU    SP , STK_CTX_SIZE;          \
                                        \
    OPERATE_REG(SW);                    \
                                        \
    SW      RA , STK_OFFSET_EPC(SP);    \
                                        \
    MFC0(T1, CP0_STATUS);               \
    SW      T1 , STK_OFFSET_SR(SP);     \
                                        \
    MFC0(T1, CP0_CAUSE);                \
    SW      T1 , STK_OFFSET_CAUSE(SP);  \
                                        \
    MFLO    T1;                         \
    EHB;                                \
    SW      T1 , STK_OFFSET_LO(SP);     \
                                        \
    MFHI    T1;                         \
    EHB;                                \
    SW      T1 , STK_OFFSET_HI(SP);     \
                                        \
    .set    pop

#endif                                                                  /*  __MIPSCONTEXTASM_H          */
/*********************************************************************************************************
  END
*********************************************************************************************************/
